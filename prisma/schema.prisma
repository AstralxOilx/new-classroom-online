generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id            Int                @id @default(autoincrement())
  user_name          String             @db.VarChar(50) @unique
  email              String             @unique @db.VarChar(100)
  password           String             @db.VarChar(255)
  role_id            Int  
  identification     String?
  image_url          String? // URL ของรูปภาพ
  status_id          Int                @default(1) // default to pending
  created_at         DateTime           @default(now()) @db.Timestamptz
  updated_at         DateTime           @updatedAt @db.Timestamptz
  last_login         DateTime?          @db.Timestamptz

  classrooms         ClassRoom[]
  messages           ChatMessage[]
  notifications      Notification[]
  assignments        Assignment[]
  submissions        Submission[]
  streams            Stream[]
  classroomStudents  ClassroomStudent[]
  attendances        Attendance[]
  streamAttendances  StreamAttendance[]

  role               Role               @relation(fields: [role_id], references: [role_id])
  status             Status             @relation(fields: [status_id], references: [status_id])
}

model ClassRoom {
  class_id           Int                @id @default(autoincrement())
  class_name         String             @db.VarChar(30)
  user_id            Int
  description        String             @db.VarChar(100)
  code               String             @unique
  color_id           Int                @default(1) // default to rose
  subject_id         Int                @default(26) // default to Other
  subject_type_id    Int                @default(8) // default to Other
  permission_id      Int                @default(1) // default to pending
  created_at         DateTime           @default(now()) @db.Timestamptz
  updated_at         DateTime           @updatedAt @db.Timestamptz

  teacher            Users              @relation(fields: [user_id], references: [user_id])
  students           ClassroomStudent[]
  assignments        Assignment[]
  streams            Stream[]
  messages           ChatMessage[]
  attendances        Attendance[]

  color              Colors             @relation(fields: [color_id], references: [color_id])
  subject            Subject            @relation(fields: [subject_id], references: [subject_id])
  subject_type       SubjectType        @relation(fields: [subject_type_id], references: [subject_type_id])
  permission         Status             @relation(fields: [permission_id], references: [status_id])
}

model ClassroomStudent {
  id                  Int        @id @default(autoincrement())
  class_id            Int
  user_id             Int
  status_id           Int        @default(1) // default to pending
  position_id         Int        @default(1) // default to Student  
  grade               String?    // เกรด
  exam_score          Float?     // คะแนนสอบ
  participation_score Float?     // คะแนนเข้าร่วมกิจกรรม
  behavior_score      Float?     // คะแนนพฤติกรรม
  effort_score        Float?     // คะแนนความพยายาม
  creativity_score    Float?     // คะแนนความคิดสร้างสรรค์
  joined_at           DateTime   @default(now()) @db.Timestamptz

  classRoom           ClassRoom  @relation(fields: [class_id], references: [class_id])
  student             Users      @relation(fields: [user_id], references: [user_id])
  status              Status     @relation(fields: [status_id], references: [status_id])
  position            Position   @relation(fields: [position_id], references: [position_id])

  @@index([class_id, user_id])
}

model Assignment {
  assignment_id      Int                @id @default(autoincrement())
  class_id           Int
  user_id            Int
  title              String             @db.VarChar(255)
  description        String?
  due_date           DateTime?
  max_score          Float?
  created_at         DateTime           @default(now()) @db.Timestamptz
  updated_at         DateTime           @updatedAt @db.Timestamptz

  classRoom          ClassRoom          @relation(fields: [class_id], references: [class_id])
  teacher            Users              @relation(fields: [user_id], references: [user_id])
  submissions        Submission[]
  files              AssignmentFile[]   // ความสัมพันธ์กับไฟล์ที่อัปโหลด

  @@index([class_id, user_id])
}

model AssignmentFile {
  id                 Int       @id @default(autoincrement())
  assignment_id      Int
  file_url           String    @db.VarChar(255)  // URL ของไฟล์หรือรูปภาพ
  file_type          String?   // ประเภทของไฟล์ เช่น image/jpeg, application/pdf
  uploaded_at        DateTime  @default(now())   @db.Timestamptz

  assignment         Assignment @relation(fields: [assignment_id], references: [assignment_id])

  @@index([assignment_id])
}


model Submission {
  submission_id      Int                @id @default(autoincrement())
  assignment_id      Int
  user_id         Int
  submitted_at       DateTime           @default(now()) @db.Timestamptz
  score              Float?
  feedback           String?

  assignment         Assignment          @relation(fields: [assignment_id], references: [assignment_id])
  student            Users               @relation(fields: [user_id], references: [user_id])
  files              SubmissionFile[]

  @@index([assignment_id, user_id])
}

model SubmissionFile {
  id                 Int                @id @default(autoincrement())
  submission_id      Int
  file_url           String             @db.VarChar(255)
  created_at         DateTime           @default(now()) @db.Timestamptz

  submission         Submission         @relation(fields: [submission_id], references: [submission_id])
}

model Stream {
  stream_id          Int                @id @default(autoincrement())
  class_id           Int
  user_id         Int
  stream_url         String             @db.VarChar(255)
  start_time         DateTime
  end_time           DateTime?

  classRoom          ClassRoom          @relation(fields: [class_id], references: [class_id])
  teacher            Users               @relation(fields: [user_id], references: [user_id])
  attendances        StreamAttendance[]

  @@index([class_id, user_id])
}

model StreamAttendance {
  id                 Int                @id @default(autoincrement())
  stream_id          Int
  user_id            Int
  joined_at          DateTime           @default(now()) @db.Timestamptz
  left_at            DateTime?          @db.Timestamptz

  stream             Stream             @relation(fields: [stream_id], references: [stream_id])
  user               Users              @relation(fields: [user_id], references: [user_id])

  @@index([stream_id, user_id])
}

model ChatMessage {
  message_id         Int                @id @default(autoincrement())
  class_id           Int
  user_id          Int
  message            String             @db.Text
  sent_at            DateTime           @default(now()) @db.Timestamptz

  classRoom          ClassRoom          @relation(fields: [class_id], references: [class_id])
  sender             Users              @relation(fields: [user_id], references: [user_id])

  @@index([class_id, user_id])
}

model Notification {
  notification_id     Int                @id @default(autoincrement())
  user_id             Int
  message             String             @db.Text
  is_read             Boolean            @default(false)
  created_at          DateTime           @default(now()) @db.Timestamptz
  updated_at          DateTime           @updatedAt @db.Timestamptz
  type_id             Int                @default(1) // default to Generic

  user               Users               @relation(fields: [user_id], references: [user_id])
  type               NotificationType    @relation(fields: [type_id], references: [type_id])

  @@index([user_id])
}

model Role {
  role_id           Int                @id @default(autoincrement())
  role_name         String             @unique @db.VarChar(50)

  users             Users[]
}

model Attendance {
  attendance_id      Int                @id @default(autoincrement())
  class_id           Int
  user_id            Int
  date               DateTime           @default(now()) @db.Timestamptz
  status_id          Int                @default(3) // default to absent
  attendance_score   Float?     // คะแนนการเข้าร่วมชั้นเรียน
  description        String?

  classRoom          ClassRoom          @relation(fields: [class_id], references: [class_id])
  student            Users              @relation(fields: [user_id], references: [user_id])
  status             AttendanceStatus    @relation(fields: [status_id], references: [status_id])

  @@index([class_id, user_id])
}

model AttendanceStatus {
  status_id          Int                @id @default(autoincrement())
  status_name        String             @unique @db.VarChar(50)

  attendances        Attendance[]       // No need for @relation name; Prisma infers it
}

model Status {
  status_id          Int                @id @default(autoincrement())
  status_name        String             @unique @db.VarChar(50)

  users              Users[]            // Relationship with Users
  classroomStudents   ClassroomStudent[] // Relationship with ClassroomStudent
  classrooms         ClassRoom[]        // Relationship with ClassRoom
}

model Subject {
  subject_id         Int                @id @default(autoincrement())
  subject_name       String             @unique @db.VarChar(100)

  classrooms         ClassRoom[]
}

model SubjectType {
  subject_type_id    Int                @id @default(autoincrement())
  subject_type_name  String             @unique @db.VarChar(100)

  classrooms         ClassRoom[]
}

model Colors {
  color_id           Int                @id @default(autoincrement())
  color_name         String             @unique @db.VarChar(50)

  classrooms         ClassRoom[]
}

model NotificationType {
  type_id            Int                @id @default(autoincrement())
  type_name          String             @unique @db.VarChar(50)

  notifications      Notification[]
}

model Position {
  position_id   Int        @id @default(autoincrement())
  position_name String     @unique @db.VarChar(50)
  
  classroomStudents ClassroomStudent[]
}

